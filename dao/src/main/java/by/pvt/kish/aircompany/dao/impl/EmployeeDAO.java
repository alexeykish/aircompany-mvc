/**
 * 
 */
package by.pvt.kish.aircompany.dao.impl;

import by.pvt.kish.aircompany.constants.Column;
import by.pvt.kish.aircompany.dao.BaseDAO;
import by.pvt.kish.aircompany.entity.Employee;
import by.pvt.kish.aircompany.enums.EmployeeStatus;
import by.pvt.kish.aircompany.enums.Position;
import by.pvt.kish.aircompany.exceptions.DaoException;
import by.pvt.kish.aircompany.utils.DaoUtils;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import static by.pvt.kish.aircompany.utils.DaoUtils.closePreparedStatement;
import static by.pvt.kish.aircompany.utils.DaoUtils.closeResultSet;

/**
 * This class represents a concrete implementation of the IDAO interface for employee model.
 *
 * @author  Kish Alexey
 */
public class EmployeeDAO extends BaseDAO<Employee> {

	private static final String SQL_ADD_EMPLOYEE = "INSERT INTO employees (`first_name`,`last_name`,`position`) VALUES (?,?,?)";
	private static final String SQL_GET_ALL_EMPLOYEES = "SELECT * FROM employees";
	private static final String SQL_DELETE_EMPLOYEE = "DELETE FROM employees WHERE eid = ?";
	private static final String SQL_GET_EMPLOYEE_BY_ID = "SELECT * FROM employees WHERE eid = ?";
	private static final String SQL_UPDATE_EMPLOYEE = "UPDATE employees SET `first_name` = ?, `last_name` = ?, `position` = ? WHERE eid = ?";
	private static final String SQL_UPDATE_EMPLOYEE_STATUS = "UPDATE employees SET `status` = ? WHERE eid = ?";
	private static final String SQL_GET_ALL_AVAILABLE_EMPLOYEES = "SELECT * FROM employees " +
																	"WHERE eid NOT IN (" +
																	"SELECT t_eid FROM teams " +
																	"JOIN flights on flights.fid=teams.t_fid " +
																	"WHERE  flights.date = ?)) " +
																	"AND (employees.`status` <> 'BLOCKED')";

	private static final String ADD_EMPLOYEE_FAIL = "Creating employee failed";
	private static final String GET_ALL_EMPLOYEES_FAIL = "Get all employees failed";
	private static final String DELETE_EMPLOYEE_FAIL = "Deleting employee failed";
	private static final String UPDATE_EMPLOYEE_FAIL = "Updating employee failed";
	private static final String GET_EMPLOYEE_BY_ID_FAIL = "Getting employee by ID failed";
	private static final String UPDATE_EMPLOYEE_STATUS_FAIL = "Updating employee status failed";
	private static final String GET_ALL_AVAILABLE_EMPLOYEES_FAIL = "Getting all available employees failed";;


	private static EmployeeDAO instance;

	private EmployeeDAO() {
		super();
	}

	/**
	 * Returns an synchronized instance of a EmployeeDAO, if the instance does not exist yet - create a new
	 * @return - a instance of a EmployeeDAO
	 */
	public synchronized static EmployeeDAO getInstance() {
        if (instance == null) {
            instance = new EmployeeDAO();
        }
        return instance;
    }

	/**
	 * Create the given employee in the DB
	 * @param employee - employee to be created
	 * @return - The ID of the employee, generated by DB
	 * @throws DaoException If something fails at DB level
	 */
	@Override
	public Long add(Employee employee) throws DaoException {
		Long generatedId = null;
		ResultSet resultSet = null;
		try {
			preparedStatement = connection.prepareStatement(SQL_ADD_EMPLOYEE, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setString(1, employee.getFirstName());
			preparedStatement.setString(2, employee.getLastName());
			preparedStatement.setString(3, employee.getPosition().name());
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				generatedId = resultSet.getLong(1);
			}
		} catch (SQLException e) {
			throw new DaoException(ADD_EMPLOYEE_FAIL, e);
		} finally {
			closeResultSet(resultSet);
			closePreparedStatement(preparedStatement);
		}
		return  generatedId;
	}

	/**
	 * Returns a list of all employees from the DB
	 * @return - a list of all employees from the DB
	 * @throws DaoException If something fails at DB level
	 */
	@Override
	public List<Employee> getAll() throws DaoException {
		ResultSet resultSet = null;
		List<Employee> employees = new ArrayList<>();
		try {
			preparedStatement = connection.prepareStatement(SQL_GET_ALL_EMPLOYEES);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				Employee employee = new Employee();
				employee = setEmployeeParametrs(resultSet, employee);
				employees.add(employee);
			}
		} catch (SQLException e) {
			throw new DaoException(GET_ALL_EMPLOYEES_FAIL, e);
		} finally {
			closeResultSet(resultSet);
			closePreparedStatement(preparedStatement);
		}
		return employees;
	}

	/**
	 * Returns a list of all available employees at this date from the DB
	 * @param date - The date of the flight
	 * @return - a list of all available employees at this date from the DB
	 * @throws DaoException If something fails at DB level
	 */
	public List<Employee> getAllAvailable(Date date) throws DaoException {
		ResultSet resultSet = null;
		List<Employee> employees = new ArrayList<>();
		try {
			preparedStatement = connection.prepareStatement(SQL_GET_ALL_AVAILABLE_EMPLOYEES);
			preparedStatement.setDate(1, date);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				Employee employee = new Employee();
				employee = setEmployeeParametrs(resultSet, employee);
				employees.add(employee);
			}
		} catch (SQLException e) {
			throw new DaoException(GET_ALL_AVAILABLE_EMPLOYEES_FAIL, e);
		} finally {
			closeResultSet(resultSet);
			closePreparedStatement(preparedStatement);
		}
		return employees;
	}

	/**
	 * Delete the given employee from the DB
	 * @param id - The ID of the employee to be deleted from the DB
	 * @throws DaoException If something fails at DB level
	 */
	@Override
	public void delete(Long id) throws DaoException {
		DaoUtils.deleteEntity(connection, preparedStatement, id, SQL_DELETE_EMPLOYEE, DELETE_EMPLOYEE_FAIL);
	}

	/**
	 * Update the given employee in the DB
	 * @param employee - employee to be updated
	 * @throws DaoException If something fails at DB level
	 */
	@Override
	public void update(Employee employee) throws DaoException {
		try {
			preparedStatement = connection.prepareStatement(SQL_UPDATE_EMPLOYEE);
			preparedStatement.setString(1, employee.getFirstName());
			preparedStatement.setString(2, employee.getLastName());
			preparedStatement.setString(3, employee.getPosition().name());
			preparedStatement.setLong(4, employee.getEid());
			preparedStatement.executeUpdate();
		} catch (SQLException e) {
			throw new DaoException(UPDATE_EMPLOYEE_FAIL, e);
		} finally {
			closePreparedStatement(preparedStatement);
		}
	}

	/**
	 * Returns the employee from the DB matching the given ID
	 * @param id - The ID of the employee to be returned
	 * @return - the employee from the DB
	 * @throws DaoException If something fails at DB level
	 */
	@Override
	public Employee getById(Long id) throws DaoException {
		ResultSet resultSet = null;
		Employee employee = null;
		try {
			preparedStatement = connection.prepareStatement(SQL_GET_EMPLOYEE_BY_ID);
			preparedStatement.setLong(1, id);
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				employee = new Employee();
				employee = setEmployeeParametrs(resultSet, employee);
			}
		} catch (SQLException e) {
			throw new DaoException(GET_EMPLOYEE_BY_ID_FAIL, e);
		} finally {
			closeResultSet(resultSet);
			closePreparedStatement(preparedStatement);
		}
		return employee;
	}

	/**
	 * Set employees status to the DB
	 * @param id - The ID of the employee
	 * @param status - The status to be changed
	 * @throws DaoException If something fails at DB level
	 */
	public void setStatus(Long id, String status) throws DaoException {
		DaoUtils.setEntityStatus(connection, preparedStatement, id, status, SQL_UPDATE_EMPLOYEE_STATUS, UPDATE_EMPLOYEE_STATUS_FAIL);
	}

	private Employee setEmployeeParametrs(ResultSet resultSet, Employee employee) throws SQLException {
		employee.setEid(resultSet.getLong(Column.EMPLOYEES_EID));
		employee.setLastName(resultSet.getString(Column.EMPLOYEES_LASTNAME));
		employee.setFirstName(resultSet.getString(Column.EMPLOYEES_FIRSTNAME));
		employee.setPosition(Position.valueOf(resultSet.getString(Column.EMPLOYEES_POSITION)));
		employee.setStatus(EmployeeStatus.valueOf(resultSet.getString(Column.EMPLOYEES_STATUS)));
		return employee;
	}
}
