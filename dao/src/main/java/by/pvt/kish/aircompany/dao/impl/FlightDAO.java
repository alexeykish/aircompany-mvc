package by.pvt.kish.aircompany.dao.impl;

import by.pvt.kish.aircompany.constants.Column;
import by.pvt.kish.aircompany.dao.BaseDAO;
import by.pvt.kish.aircompany.dao.IFlightDAO;
import by.pvt.kish.aircompany.entity.Flight;
import by.pvt.kish.aircompany.enums.FlightStatus;
import by.pvt.kish.aircompany.exceptions.DaoException;
import by.pvt.kish.aircompany.utils.DaoUtils;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import static by.pvt.kish.aircompany.utils.DaoUtils.closePreparedStatement;
import static by.pvt.kish.aircompany.utils.DaoUtils.closeResultSet;
import static by.pvt.kish.aircompany.utils.DaoUtils.deleteEntity;

/**
 * This class represents a concrete implementation of the IDAO interface for flight model.
 *
 * @author Kish Alexey
 */
public class FlightDAO extends BaseDAO<Flight> implements IFlightDAO{

    private static final String SQL_ADD_FLIGHT = "INSERT INTO  flights (`date`,`from`,`to`, `pid`) VALUES (?,?,?,?)";
    private static final String SQL_GET_ALL_FLIGHTS = "SELECT * FROM flights ORDER BY `date`";
    private static final String SQL_DELETE_FLIGHT = "DELETE FROM flights WHERE fid = ?";
    private static final String SQL_GET_FLIGHT_BY_ID = "SELECT * FROM flights WHERE fid = ?";
    private static final String SQL_UPDATE_FLIGHT = "UPDATE flights SET `date` = ?, `from` = ?, `to` = ?, `pid` = ?, `status` = ? WHERE fid = ?";
    private static final String SQL_GET_PLANES_LAST_FIVE_FLIGHTS = "SELECT * FROM flights WHERE pid = ? ORDER BY `date` DESC LIMIT 5";
    private static final String SQL_GET_EMPLOYEES_LAST_FIVE_FLIGHTS = "SELECT * FROM teams JOIN flights ON flights.fid=teams.t_fid WHERE t_eid = ? ORDER BY `date` DESC LIMIT 5";
    private static final String SQL_UPDATE_FLIGHT_STATUS = "UPDATE flights SET `status` = ? WHERE fid = ?";

    private static final String ADD_FLIGHT_FAIL = "Creating flight failed";
    private static final String GET_ALL_FLIGHTS_FAIL = "Get all flights failed";
    private static final String DELETE_FLIGHT_FAIL = "Deleting flight failed";
    private static final String UPDATE_FLIGHT_FAIL = "Updating flight failed";
    private static final String GET_FLIGHT_BY_ID_FAIL = "Getting flight by ID failed";
    private static final String GET_PLANE_FLIGHTS_FAIL = "Getting planes flights failed";
    private static final String GET_EMPLOYEES_FLIGHTS_FAIL = "Getting employees flights failed";
    private static final String UPDATE_FLIGHT_STATUS_FAIL = "Updating flight status failed";


    private static FlightDAO instance;

    private FlightDAO() {
        super();
    }

    /**
     * Returns an synchronized instance of a FlightDAO, if the instance does not exist yet - create a new
     * @return - a instance of a FlightDAO
     */
    public synchronized static FlightDAO getInstance() {
        if (instance == null) {
            instance = new FlightDAO();
        }
        return instance;
    }

    /**
     * Create the given flight in the DB
     * @param flight - flight to be created
     * @return - The ID of the flight, generated by DB
     * @throws DaoException If something fails at DB level
     */
    @Override
    public Long add(Flight flight) throws DaoException {
        Long generatedId = null;
        ResultSet resultSet = null;
        try {
            preparedStatement = connection.prepareStatement(SQL_ADD_FLIGHT, Statement.RETURN_GENERATED_KEYS);
            preparedStatement.setDate(1, flight.getDate());
            preparedStatement.setLong(2, flight.getFrom().getAid());
            preparedStatement.setLong(3, flight.getTo().getAid());
            preparedStatement.setLong(4, flight.getPlane().getPid());
            preparedStatement.executeUpdate();
            resultSet = preparedStatement.getGeneratedKeys();
            if (resultSet.next()) {
                generatedId = resultSet.getLong(1);
            }
        } catch (SQLException e) {
            throw new DaoException(ADD_FLIGHT_FAIL, e);
        } finally {
            closeResultSet(resultSet);
            closePreparedStatement(preparedStatement);
        }
        return generatedId;
    }

    /**
     * Returns a list of all flights from the DB
     * @return - a list of all flights from the DB
     * @throws DaoException If something fails at DB level
     */
    @Override
    public List<Flight> getAll() throws DaoException {
        ResultSet resultSet = null;
        List<Flight> flights = new ArrayList<>();
        try {
            preparedStatement = connection.prepareStatement(SQL_GET_ALL_FLIGHTS);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                Flight flight = new Flight();
                flight = setFlightParametrs(resultSet, flight);
            flights.add(flight);
        }
        } catch (SQLException e) {
            throw new DaoException(GET_ALL_FLIGHTS_FAIL, e);
        } finally {
            closeResultSet(resultSet);
            closePreparedStatement(preparedStatement);
        }
        return flights;
    }

    /**
     * Delete the given flight from the DB
     * @param id - The ID of the flight to be deleted from the DB
     * @throws DaoException If something fails at DB level
     */
    @Override
    public void delete(Long id) throws DaoException {
        deleteEntity(connection, preparedStatement, id, SQL_DELETE_FLIGHT, DELETE_FLIGHT_FAIL);
    }

    /**
     * Update the given flight in the DB
     * @param flight - flight to be updated
     * @throws DaoException If something fails at DB level
     */
    @Override
    public void update(Flight flight) throws DaoException {
        try {
            preparedStatement = connection.prepareStatement(SQL_UPDATE_FLIGHT);
            preparedStatement.setDate(1, flight.getDate());
            preparedStatement.setLong(2, flight.getFrom().getAid());
            preparedStatement.setLong(3, flight.getTo().getAid());
            preparedStatement.setLong(4, flight.getPlane().getPid());
            preparedStatement.setString(5, flight.getStatus().toString());
            preparedStatement.setLong(6, flight.getFid());
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            throw new DaoException(UPDATE_FLIGHT_FAIL, e);
        } finally {
            closePreparedStatement(preparedStatement);
        }
    }

    /**
     * Returns the flight from the DB matching the given ID
     * @param id - The ID of the flight to be returned
     * @return - the flight from the DB
     * @throws DaoException If something fails at DB level
     */
    @Override
    public Flight getById(Long id) throws DaoException {
        ResultSet resultSet = null;
        Flight flight = null;
        try {
            preparedStatement = connection.prepareStatement(SQL_GET_FLIGHT_BY_ID);
            preparedStatement.setLong(1, id);
            resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                flight = new Flight();
                flight = setFlightParametrs(resultSet, flight);
            }
        } catch (SQLException e) {
            throw new DaoException(GET_FLIGHT_BY_ID_FAIL, e);
        } finally {
            closeResultSet(resultSet);
            closePreparedStatement(preparedStatement);
        }
        return flight;
    }


    /**
     * Returns a list of five last flights of the concrete plane from the DB
     *
     * @param id - The ID of the plane
     * @return - the list of last five flight of the concrete plane
     * @throws DaoException If something fails at DB level
     */
    @Override
    public List<Flight> getPlaneLastFiveFlights(Long id) throws DaoException {
        return getLastFiveFlights(id, SQL_GET_PLANES_LAST_FIVE_FLIGHTS, GET_PLANE_FLIGHTS_FAIL);
    }

    /**
     * Returns a list of five last flights of the concrete employee from the DB
     *
     * @param id - The ID of the plane
     * @return - the list of last five flight of the concrete employee
     * @throws DaoException If something fails at DB level
     */
    @Override
    public List<Flight> getEmployeeLastFiveFlights(Long id) throws DaoException {
        return getLastFiveFlights(id, SQL_GET_EMPLOYEES_LAST_FIVE_FLIGHTS, GET_EMPLOYEES_FLIGHTS_FAIL);
    }

    /**
     * Update particular plane status int the DB matching the given ID
     *
     * @param id - The ID of the flight
     * @throws DaoException If something fails at DB level
     */
    public void setStatus(Long id, String status) throws DaoException {
        DaoUtils.setEntityStatus(connection, preparedStatement, id, status, SQL_UPDATE_FLIGHT_STATUS, UPDATE_FLIGHT_STATUS_FAIL);
    }

    private Flight setFlightParametrs(ResultSet resultSet, Flight flight) throws SQLException, DaoException {
        Long fid = resultSet.getLong(Column.FLIGHTS_FID);
        flight.setFid(fid);
        flight.setDate(resultSet.getDate(Column.FLIGHTS_DATE));
        flight.setFrom(AirportDAO.getInstance().getById(resultSet.getLong(Column.FLIGHTS_FROM)));
        flight.setTo(AirportDAO.getInstance().getById(resultSet.getLong(Column.FLIGHTS_TO)));
        flight.setPlane(PlaneDAO.getInstance().getById(resultSet.getLong(Column.FLIGHTS_PID)));
        flight.setTeam(TeamDAO.getInstance().getById(fid));
        flight.setStatus(FlightStatus.valueOf(resultSet.getString(Column.FLIGHTS_STATUS)));
        return flight;
    }

    private List<Flight> getLastFiveFlights(Long id, String sqlQuery, String failMessage) throws DaoException {
        List<Flight> flights = new ArrayList<>();
        ResultSet resultSet = null;
        try {
            preparedStatement = connection.prepareStatement(sqlQuery);
            preparedStatement.setLong(1, id);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                Flight flight = new Flight();
                flight = setFlightParametrs(resultSet, flight);
                flights.add(flight);
            }
        } catch (SQLException e) {
            throw new DaoException(failMessage, e);
        } finally {
            closeResultSet(resultSet);
            closePreparedStatement(preparedStatement);
        }
        return flights;
    }


}
